[
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "train_test_split",
        "importPath": "sklearn.model_selection",
        "description": "sklearn.model_selection",
        "isExtraImport": true,
        "detail": "sklearn.model_selection",
        "documentation": {}
    },
    {
        "label": "StandardScaler",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "LabelEncoder",
        "importPath": "sklearn.preprocessing",
        "description": "sklearn.preprocessing",
        "isExtraImport": true,
        "detail": "sklearn.preprocessing",
        "documentation": {}
    },
    {
        "label": "confusion_matrix",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "classification_report",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "accuracy_score",
        "importPath": "sklearn.metrics",
        "description": "sklearn.metrics",
        "isExtraImport": true,
        "detail": "sklearn.metrics",
        "documentation": {}
    },
    {
        "label": "SMOTE",
        "importPath": "imblearn.over_sampling",
        "description": "imblearn.over_sampling",
        "isExtraImport": true,
        "detail": "imblearn.over_sampling",
        "documentation": {}
    },
    {
        "label": "BalancedRandomForestClassifier",
        "importPath": "imblearn.ensemble",
        "description": "imblearn.ensemble",
        "isExtraImport": true,
        "detail": "imblearn.ensemble",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": "backend-flask.app.app",
        "description": "backend-flask.app.app",
        "peekOfCode": "def hello_world():\n    return 'Hello, World!'\n@app.route('/predict', methods=['POST'])\ndef predict():\n    try:\n        # Get the data from the request\n        data = request.get_json()\n        # Ensure that the input JSON contains all the required features\n        if not all(feature in data for feature in feature_columns):\n            return jsonify({'error': 'Missing required features'}), 400",
        "detail": "backend-flask.app.app",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "backend-flask.app.app",
        "description": "backend-flask.app.app",
        "peekOfCode": "def predict():\n    try:\n        # Get the data from the request\n        data = request.get_json()\n        # Ensure that the input JSON contains all the required features\n        if not all(feature in data for feature in feature_columns):\n            return jsonify({'error': 'Missing required features'}), 400\n        # Convert the features into a pandas DataFrame with the correct column names\n        input_df = pd.DataFrame([data], columns=feature_columns)\n        # Scale the features using the same scaler that was used during training",
        "detail": "backend-flask.app.app",
        "documentation": {}
    },
    {
        "label": "feature_columns",
        "kind": 5,
        "importPath": "backend-flask.app.app",
        "description": "backend-flask.app.app",
        "peekOfCode": "feature_columns = ['UDI', 'Air temperature [K]', 'Process temperature [K]', \n                   'Rotational speed [rpm]', 'Torque [Nm]', 'Tool wear [min]']\napp = Flask(__name__)\nCORS(app)\n@app.route('/', methods=['GET'])\ndef hello_world():\n    return 'Hello, World!'\n@app.route('/predict', methods=['POST'])\ndef predict():\n    try:",
        "detail": "backend-flask.app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend-flask.app.app",
        "description": "backend-flask.app.app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/', methods=['GET'])\ndef hello_world():\n    return 'Hello, World!'\n@app.route('/predict', methods=['POST'])\ndef predict():\n    try:\n        # Get the data from the request\n        data = request.get_json()",
        "detail": "backend-flask.app.app",
        "documentation": {}
    },
    {
        "label": "predict_new_data",
        "kind": 2,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "def predict_new_data(input_data):\n    # Ensure input_data has the same columns as training data\n    input_df = pd.DataFrame([input_data])\n    # Match columns with training data\n    expected_columns = x.columns  # Columns used for training\n    input_df = input_df[expected_columns]  # Reorder columns if necessary\n    # Scale the input using the same scaler\n    scaled_input = scaler.transform(input_df)\n    # Predict using the model\n    prediction = model.predict(scaled_input)",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "csv = pd.read_csv('D:\\\\Code\\\\python\\\\ml-practice\\\\data\\\\predictive-maintenance-2\\\\predictive_maintenance.csv')\n# Encode 'Failure Type' into numerical labels\nlabel_encoder = LabelEncoder()\ncsv['Failure Type'] = label_encoder.fit_transform(csv['Failure Type'])\n# Select numeric columns (exclude non-numeric like 'Product ID' and 'Type')\nnumeric_data = csv.select_dtypes(include=['number'])\n# Split features (X) and target (y)\nx = numeric_data.drop(columns=['Target', 'Failure Type'])  # Drop target columns not needed for training\ny = numeric_data['Failure Type']\n# Train-test split",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "label_encoder",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "label_encoder = LabelEncoder()\ncsv['Failure Type'] = label_encoder.fit_transform(csv['Failure Type'])\n# Select numeric columns (exclude non-numeric like 'Product ID' and 'Type')\nnumeric_data = csv.select_dtypes(include=['number'])\n# Split features (X) and target (y)\nx = numeric_data.drop(columns=['Target', 'Failure Type'])  # Drop target columns not needed for training\ny = numeric_data['Failure Type']\n# Train-test split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n# Scale the data using StandardScaler",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "numeric_data",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "numeric_data = csv.select_dtypes(include=['number'])\n# Split features (X) and target (y)\nx = numeric_data.drop(columns=['Target', 'Failure Type'])  # Drop target columns not needed for training\ny = numeric_data['Failure Type']\n# Train-test split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n# Scale the data using StandardScaler\nscaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "x = numeric_data.drop(columns=['Target', 'Failure Type'])  # Drop target columns not needed for training\ny = numeric_data['Failure Type']\n# Train-test split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n# Scale the data using StandardScaler\nscaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n# Apply SMOTE for oversampling the minority class\nsmote = SMOTE(random_state=0)",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "y = numeric_data['Failure Type']\n# Train-test split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n# Scale the data using StandardScaler\nscaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n# Apply SMOTE for oversampling the minority class\nsmote = SMOTE(random_state=0)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train_scaled, y_train)",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "scaler",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "scaler = StandardScaler()\nx_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n# Apply SMOTE for oversampling the minority class\nsmote = SMOTE(random_state=0)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train_scaled, y_train)\n# Balanced Random Forest\nmodel = BalancedRandomForestClassifier(random_state=0, n_estimators=200)\nmodel.fit(x_train_scaled, y_train)\ny_pred = model.predict(x_test_scaled)",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "x_train_scaled",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "x_train_scaled = scaler.fit_transform(x_train)\nx_test_scaled = scaler.transform(x_test)\n# Apply SMOTE for oversampling the minority class\nsmote = SMOTE(random_state=0)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train_scaled, y_train)\n# Balanced Random Forest\nmodel = BalancedRandomForestClassifier(random_state=0, n_estimators=200)\nmodel.fit(x_train_scaled, y_train)\ny_pred = model.predict(x_test_scaled)\n# Display results",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "x_test_scaled",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "x_test_scaled = scaler.transform(x_test)\n# Apply SMOTE for oversampling the minority class\nsmote = SMOTE(random_state=0)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train_scaled, y_train)\n# Balanced Random Forest\nmodel = BalancedRandomForestClassifier(random_state=0, n_estimators=200)\nmodel.fit(x_train_scaled, y_train)\ny_pred = model.predict(x_test_scaled)\n# Display results\nprint(f\"\\n=== Training Gradient Boosting ===\")",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "smote",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "smote = SMOTE(random_state=0)\nx_train_resampled, y_train_resampled = smote.fit_resample(x_train_scaled, y_train)\n# Balanced Random Forest\nmodel = BalancedRandomForestClassifier(random_state=0, n_estimators=200)\nmodel.fit(x_train_scaled, y_train)\ny_pred = model.predict(x_test_scaled)\n# Display results\nprint(f\"\\n=== Training Gradient Boosting ===\")\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\nprint(\"Confusion Matrix:\")",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "model = BalancedRandomForestClassifier(random_state=0, n_estimators=200)\nmodel.fit(x_train_scaled, y_train)\ny_pred = model.predict(x_test_scaled)\n# Display results\nprint(f\"\\n=== Training Gradient Boosting ===\")\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\nprint(\"Confusion Matrix:\")\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(\"\\nClassification Report:\")",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "y_pred",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "y_pred = model.predict(x_test_scaled)\n# Display results\nprint(f\"\\n=== Training Gradient Boosting ===\")\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\nprint(\"Confusion Matrix:\")\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n# Visualize confusion matrix",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "cm = confusion_matrix(y_test, y_pred)\nprint(cm)\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, y_pred, target_names=label_encoder.classes_))\n# Visualize confusion matrix\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)\nplt.title('Confusion Matrix - Gradient Boosting')\nplt.xlabel('Predicted Label')\nplt.ylabel('True Label')",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "input_data",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "input_data = {\n    \"UDI\": 103,\n    \"Air temperature [K]\": 320.0,\n    \"Process temperature [K]\": 400.0,\n    \"Rotational speed [rpm]\": 300,\n    \"Torque [Nm]\": 2.0,\n    \"Tool wear [min]\": 400\n}\npredicted_result = predict_new_data(input_data)\nprint(f\"Prediction for new data: {predicted_result}\")",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "predicted_result",
        "kind": 5,
        "importPath": "backend-flask.app.new",
        "description": "backend-flask.app.new",
        "peekOfCode": "predicted_result = predict_new_data(input_data)\nprint(f\"Prediction for new data: {predicted_result}\")",
        "detail": "backend-flask.app.new",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend-react.node_modules.flatted.python.flatted",
        "description": "frontend-react.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend-react.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend-react.node_modules.flatted.python.flatted",
        "description": "frontend-react.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend-react.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend-react.node_modules.flatted.python.flatted",
        "description": "frontend-react.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend-react.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend-react.node_modules.flatted.python.flatted",
        "description": "frontend-react.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend-react.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "frontend-react.node_modules.flatted.python.test",
        "description": "frontend-react.node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "frontend-react.node_modules.flatted.python.test",
        "documentation": {}
    }
]